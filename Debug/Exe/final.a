;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <alcd.h>
;
;#define c1 PINC.4
;#define c2 PINC.5
;#define c3 PINC.6
;#define c4 PINC.7
;#define FIRE_THRESHOLD 639
;
;int people_inside1();
;int people_inside2();
;
;// Declare your global variables here
;int fire1,fire2 = 0;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0014 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0015 
; 0000 0016     PORTD.7 = 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0017 
; 0000 0018 }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 001C {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001D 
; 0000 001E     PORTD.7 = 1;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001F 
; 0000 0020 }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0024 {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0025 // Reinitialize Timer1 value
; 0000 0026 TCNT1H=0x85EE >> 8;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0027 TCNT1L=0x85EE & 0xff;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0028 // Place your code here
; 0000 0029 
; 0000 002A }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;// Read the AD conversion result
;#define FIRST_ADC_INPUT 0
;#define LAST_ADC_INPUT 1
;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0036 {
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0037 static unsigned char input_index=0;
; 0000 0038 // Read the AD conversion result
; 0000 0039 adc_data[input_index]=ADCW;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003A // Select next ADC input
; 0000 003B if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003C    input_index=0;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003D ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003E // Delay needed for the stabilization of the ADC input voltage
; 0000 003F delay_us(10);
;PCODE: $00000037 VOL: 0
; 0000 0040 //
; 0000 0041 //lcd_clear();
; 0000 0042 //sprintf(st,"Temp1= %d",adc_data[0]);
; 0000 0043 //lcd_puts(st);
; 0000 0044 //sprintf(st,"\nTemp2= %d",adc_data[1]);
; 0000 0045 //lcd_puts(st);
; 0000 0046 if (!fire1 && adc_data[0] > FIRE_THRESHOLD){
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0047             lcd_clear();
;PCODE: $00000041 VOL: 0
; 0000 0048             lcd_puts("floor1 on fire");
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0049             lcd_gotoxy(0,1);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 004A             lcd_putchar(people_inside1()+'0');
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 004B             lcd_puts(" people inside");
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 004C             fire1 = 1;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004D             PORTD.7 =1;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004E             PORTD.6 = 0;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004F             delay_ms(5);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0050             putchar('x');
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0051             delay_ms(5);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0052             PORTD.6 = 1;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0053             }
; 0000 0054 if (!fire2 && adc_data[1] > FIRE_THRESHOLD){
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0055             lcd_clear();
;PCODE: $0000006B VOL: 0
; 0000 0056             lcd_puts("floor2 on fire");
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0057             lcd_gotoxy(0,1);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0058             lcd_putchar(people_inside2()+'0');
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0059             lcd_puts(" people inside");
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 005A             fire2 = 1;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 005B             PORTD.7 =1;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 005C             PORTD.6 = 0;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 005D             delay_ms(5);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 005E             putchar('X');
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 005F             delay_ms(5);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0060             PORTD.6 = 1;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0061             }
; 0000 0062 
; 0000 0063 
; 0000 0064 }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0

	.DSEG
_0xB:
	.BYTE 0x3C
;
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 12
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;int inside_counter = 0;
;char shift[4] = {0xFE, 0xFD, 0xFB, 0xF7 };
;char layout[16]= {'1','2','3','x',
;                        '4','5','6','x',
;                        '7','8','9','x',
;                        'x','0','x','x'};
;char position;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0089 {

	.CSEG
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 008A 
; 0000 008B char status,data;
; 0000 008C status=UCSRA;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 008D data=UDR;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 008E 
; 0000 008F if (data == 'x'){
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0090     lcd_clear();
;PCODE: $00000099 VOL: 0
; 0000 0091     lcd_puts("floor1 on fire!");
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0092     rx_counter = 0;
;PCODE: $0000009D VOL: 0
; 0000 0093     rx_wr_index = 0;
;PCODE: $0000009E VOL: 0
; 0000 0094     rx_rd_index=0;
;PCODE: $0000009F VOL: 0
; 0000 0095     }
; 0000 0096 if (data == 'X'){
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0097     lcd_clear();
;PCODE: $000000A4 VOL: 0
; 0000 0098     lcd_puts("floor2 on fire!");
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0099     rx_counter = 0;
;PCODE: $000000A8 VOL: 0
; 0000 009A     rx_wr_index = 0;
;PCODE: $000000A9 VOL: 0
; 0000 009B     rx_rd_index=0;
;PCODE: $000000AA VOL: 0
; 0000 009C     }
; 0000 009D if (data == 'z'){
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 009E     lcd_clear();
;PCODE: $000000AF VOL: 0
; 0000 009F     lcd_puts("Evacuated");
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00A0     }
; 0000 00A1 if (data == 'y'){
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00A2     lcd_clear();
;PCODE: $000000B7 VOL: 0
; 0000 00A3     lcd_puts("System off.");
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00A4     }
; 0000 00A5 
; 0000 00A6 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00A7    {
; 0000 00A8    rx_buffer[rx_wr_index++]=data;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00A9 
; 0000 00AA #if RX_BUFFER_SIZE == 256
; 0000 00AB    // special case for receiver buffer size=256
; 0000 00AC    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 00AD #else
; 0000 00AE    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00AF    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00B0       {
; 0000 00B1       rx_counter=0;
;PCODE: $000000CD VOL: 0
; 0000 00B2       rx_buffer_overflow=1;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00B3       }
; 0000 00B4 #endif
; 0000 00B5    }
;PCODE: $000000D1 VOL: 0
; 0000 00B6 }
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0

	.DSEG
_0x1E:
	.BYTE 0x36
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 00BD {

	.CSEG
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00BE char data;
; 0000 00BF while (rx_counter==0);
;PCODE: $000000D9 VOL: 0
;	data -> R17
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00C0 data=rx_buffer[rx_rd_index++];
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00C1 #if RX_BUFFER_SIZE != 256
; 0000 00C2 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00C3 #endif
; 0000 00C4 #asm("cli")
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
	cli
;PCODE: $000000EA VOL: 0
; 0000 00C5 --rx_counter;
;PCODE: $000000EB VOL: 0
; 0000 00C6 #asm("sei")
;PCODE: $000000EC VOL: 0
	sei
;PCODE: $000000ED VOL: 0
; 0000 00C7 return data;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00C8 }
;PCODE: $000000F1 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 16
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index=0,tx_rd_index=0;
;#else
;unsigned int tx_wr_index=0,tx_rd_index=0;
;#endif
;
;#if TX_BUFFER_SIZE < 256
;unsigned char tx_counter=0;
;#else
;unsigned int tx_counter=0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 00DE {
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00DF if (tx_counter)
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00E0    {
; 0000 00E1    --tx_counter;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00E2    UDR=tx_buffer[tx_rd_index++];
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00E3 #if TX_BUFFER_SIZE != 256
; 0000 00E4    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00E5 #endif
; 0000 00E6    }
;PCODE: $00000107 VOL: 0
; 0000 00E7 }
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00EE {
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00EF while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $0000010E VOL: 0
;	c -> Y+0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00F0 #asm("cli")
;PCODE: $00000115 VOL: 0
	cli
;PCODE: $00000116 VOL: 0
; 0000 00F1 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00F2    {
; 0000 00F3    tx_buffer[tx_wr_index++]=c;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00F4 #if TX_BUFFER_SIZE != 256
; 0000 00F5    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00F6 #endif
; 0000 00F7    ++tx_counter;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00F8    }
; 0000 00F9 else
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00FA    UDR=c;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00FB #asm("sei")
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
	sei
;PCODE: $00000136 VOL: 0
; 0000 00FC }
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;#pragma used-
;#endif
;
;
;
; unsigned char keypad(){
; 0000 0102 unsigned char keypad(){
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0103   unsigned char r,b;
; 0000 0104       while(1){
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;	r -> R17
;	b -> R16
;PCODE: $0000013E VOL: 0
; 0000 0105         for (r=0; r<4; r++){
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0106          b=4;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0107          PORTC=shift[r];
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0108          if(c1==0) b=0;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0109          if(c2==0) b=1;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 010A          if(c3==0) b=2;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 010B          if(c4==0) b=3;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 010C 
; 0000 010D           if (!(b==4)){
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 010E            position=layout[(r*4)+b];
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 010F            while(c1==0);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 0110            while(c2==0);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0111            while(c3==0);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0112            while(c4==0);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0113            delay_ms(50);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0114            return position;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0115           }
; 0000 0116         }
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0117       }
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0118  }
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;
;void clear_buffer(){
; 0000 011A void clear_buffer(){
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 011B     int i=0;
; 0000 011C      for (i=0;i<12;i++){
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;	i -> R16,R17
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 011D                 rx_buffer[i]='0';
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 011E                 }
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 011F      }
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;
;      int entrance_status1[2]= {0};
;    //Sara, Atieh
;      int entrance_status2[3]= {0};
;    //Zahra, Jack, Shakiba
;    int people_inside1(){
; 0000 0125 int people_inside1(){
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0126             int j= 0;
; 0000 0127             int counter= 0;
; 0000 0128             for(j=0;j<2;j++){
;PCODE: $000001B8 VOL: 0
;	j -> R16,R17
;	counter -> R18,R19
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0129                 if(entrance_status1[j] == 1)
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 012A                     counter++; }
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 012B             return counter;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 012C             }
;PCODE: $000001D9 VOL: 0
;    int people_inside2(){
; 0000 012D int people_inside2(){
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 012E             int j= 0;
; 0000 012F             int counter= 0;
; 0000 0130             for(j=0;j<3;j++){
;PCODE: $000001DC VOL: 0
;	j -> R16,R17
;	counter -> R18,R19
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0131                 if(entrance_status2[j] == 1)
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0132                     counter++; }
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0133             return counter;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0134             }
;PCODE: $000001FD VOL: 0
;    int keypad_w_index=0;
;    char keypad_buffer[3];
;// External Interrupt 2 service routine
; interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 0139 {
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 013A            unsigned char ch;
; 0000 013B            ch = keypad();
;PCODE: $00000200 VOL: 0
;	ch -> R17
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 013C            if (keypad_w_index == 0)
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 013D             lcd_clear();
;PCODE: $00000206 VOL: 0
; 0000 013E            lcd_putchar(ch);
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 013F            PORTC = 0xF0;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0140            keypad_buffer[keypad_w_index++] = ch;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0141            if(keypad_w_index > 2){
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0142            keypad_w_index=0;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0143 
; 0000 0144            if(keypad_buffer[0] == '3' && keypad_buffer[1] == '3' && keypad_buffer[2] == '3' && fire1 == 1 && adc_data[0] ...
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 0145            lcd_clear();
;PCODE: $0000022D VOL: 0
; 0000 0146            lcd_puts("System OFF.");
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 0147            PORTD.4 = 0;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 0148            PORTD.7 = 0;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0149            fire1 = 0;
;PCODE: $00000235 VOL: 0
; 0000 014A            putchar('y');
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 014B            }
; 0000 014C 
; 0000 014D            if(keypad_buffer[0] == '3' && keypad_buffer[1] == '3' && keypad_buffer[2] == '3' && fire2 == 1 &&  adc_data[1 ...
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 014E            lcd_clear();
;PCODE: $0000024F VOL: 0
; 0000 014F            lcd_puts("System OFF.");
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 0150            PORTD.4 = 0;
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 0151            PORTD.4 = 7;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0152            fire2 = 0;
;PCODE: $00000257 VOL: 0
; 0000 0153            putchar('y');
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 0154            }
; 0000 0155 
; 0000 0156             if(keypad_w_index == 0 && (keypad_buffer[0] != '3' || keypad_buffer[1] != '3' || keypad_buffer[2] != '3') ){
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 0157             lcd_clear();
;PCODE: $0000026F VOL: 0
; 0000 0158             lcd_puts("invalid code");
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 0159 
; 0000 015A 
; 0000 015B            if(keypad_buffer[0] == '9' && keypad_buffer[1] == '9' && keypad_buffer[2] == '9'){
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 015C            lcd_clear();
;PCODE: $00000282 VOL: 0
; 0000 015D            lcd_puts("Test mode");
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 015E            delay_ms(1000);
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 015F            lcd_clear();
;PCODE: $00000288 VOL: 0
; 0000 0160             lcd_puts("floor1 on fire");
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 0161             lcd_gotoxy(0,1);
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 0162             lcd_putchar(people_inside1()+'0');
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 0163             lcd_puts(" people inside");
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 0164             fire1 = 1;
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 0165             PORTD.7 = 1;
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 0166             PORTD.6 = 0;
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 0167             delay_ms(5);
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0168             putchar('x');
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0169             delay_ms(5);
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 016A             PORTD.6 = 1;
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 016B            }
; 0000 016C 
; 0000 016D           }
;PCODE: $000002A7 VOL: 0
; 0000 016E  }
;PCODE: $000002A8 VOL: 0
; 0000 016F 
; 0000 0170 }
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0

	.DSEG
_0x5A:
	.BYTE 0x4D
;
;void lcd_show(){
; 0000 0172 void lcd_show(){

	.CSEG
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 0173 
; 0000 0174                 lcd_clear();
;PCODE: $000002B0 VOL: 0
; 0000 0175                 inside_counter = people_inside1();
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 0176                 lcd_puts("1st floor: ");
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 0177                 lcd_putchar(inside_counter+'0');
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 0178                 inside_counter = people_inside2();
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 0179                 lcd_gotoxy(0,1);
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 017A                 lcd_puts("2nd floor: ");
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 017B                 lcd_putchar(inside_counter+'0');
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 017C                 lcd_gotoxy(0,0);
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 017D                 }
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0

	.DSEG
_0x74:
	.BYTE 0x18
;
;void main(void)
; 0000 0180 {

	.CSEG
;PCODE: $000002CB VOL: 0
; 0000 0181 int inside_counter1,inside_counter2 = 0;
; 0000 0182 
; 0000 0183 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (1<<DDA3) | (1<<DDA2) | (0<<DDA1) | (0<<DDA0);
;	inside_counter1 -> R16,R17
;	inside_counter2 -> R18,R19
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0184 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 0185 
; 0000 0186 DDRB=(1<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0187 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0188 
; 0000 0189 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 018A PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 018B 
; 0000 018C DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 018D PORTD=(0<<PORTD7) | (1<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 018E 
; 0000 018F 
; 0000 0190 // Timer/Counter 1 initialization
; 0000 0191 // Clock source: System Clock
; 0000 0192 // Clock value: 125.000 kHz
; 0000 0193 // Mode: Normal top=0xFFFF
; 0000 0194 // OC1A output: Disconnected
; 0000 0195 // OC1B output: Disconnected
; 0000 0196 // Noise Canceler: Off
; 0000 0197 // Input Capture on Falling Edge
; 0000 0198 // Timer Period: 0.125 s
; 0000 0199 // Timer1 Overflow Interrupt: On
; 0000 019A // Input Capture Interrupt: Off
; 0000 019B // Compare A Match Interrupt: Off
; 0000 019C // Compare B Match Interrupt: Off
; 0000 019D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 019E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 019F TCNT1H=0xC2;
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 01A0 TCNT1L=0xF7;
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 01A1 ICR1H=0x00;
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 01A2 ICR1L=0x00;
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 01A3 OCR1AH=0x00;
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 01A4 OCR1AL=0x00;
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 01A5 OCR1BH=0x00;
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 01A6 OCR1BL=0x00;
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 01A7 
; 0000 01A8 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 01A9 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 01AA 
; 0000 01AB // ADC initialization
; 0000 01AC // ADC Clock frequency: 1000.000 kHz
; 0000 01AD // ADC Voltage Reference: AREF pin
; 0000 01AE // ADC Auto Trigger Source: Timer1 Overflow
; 0000 01AF ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 01B0 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 01B1 SFIOR=(1<<ADTS2) | (1<<ADTS1) | (0<<ADTS0);
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 01B2 
; 0000 01B3 
; 0000 01B4 // External Interrupt(s) initialization
; 0000 01B5 // INT0: On
; 0000 01B6 // INT0 Mode: Falling Edge
; 0000 01B7 // INT1: On
; 0000 01B8 // INT1 Mode: Falling Edge
; 0000 01B9 // INT2: On
; 0000 01BA // INT2 Mode: Falling Edge
; 0000 01BB GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 01BC MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 01BD MCUCSR=(0<<ISC2);
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 01BE GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 01BF 
; 0000 01C0 
; 0000 01C1 
; 0000 01C2 // USART initialization
; 0000 01C3 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01C4 // USART Receiver: On
; 0000 01C5 // USART Transmitter: On
; 0000 01C6 // USART Mode: Asynchronous
; 0000 01C7 // USART Baud Rate: 9600
; 0000 01C8 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 01C9 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 01CA UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 01CB UBRRH=0x00;
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 01CC UBRRL=0x33;
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 01CD 
; 0000 01CE 
; 0000 01CF // Alphanumeric LCD initialization
; 0000 01D0 // Connections are specified in the
; 0000 01D1 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 01D2 // RS - PORTB Bit 0
; 0000 01D3 // RD - PORTB Bit 1
; 0000 01D4 // EN - PORTB Bit 3
; 0000 01D5 // D4 - PORTB Bit 4
; 0000 01D6 // D5 - PORTB Bit 5
; 0000 01D7 // D6 - PORTB Bit 6
; 0000 01D8 // D7 - PORTB Bit 7
; 0000 01D9 // Characters/line: 16
; 0000 01DA lcd_init(16);
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 01DB 
; 0000 01DC // Global enable interrupts
; 0000 01DD #asm("sei")
;PCODE: $0000030F VOL: 0
	sei
;PCODE: $00000310 VOL: 0
; 0000 01DE 
; 0000 01DF lcd_puts("1st floor: 0\n");
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 01E0 lcd_puts("2nd floor: 0");
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 01E1 
; 0000 01E2 while (1)
;PCODE: $00000317 VOL: 0
; 0000 01E3       {
; 0000 01E4             inside_counter1 = people_inside1();
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 01E5             inside_counter2 = people_inside2();
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0000 01E6 
; 0000 01E7             if (!PORTD.4 && fire1 == 1 && inside_counter1 == 0){
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 01E8             lcd_clear();
;PCODE: $00000328 VOL: 0
; 0000 01E9             lcd_puts("Evacuated!");
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 01EA             PORTD.4 = 1;
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0000 01EB             PORTD.7 = 0;
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0000 01EC             PORTD.6 = 0;
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 01ED             delay_ms(5);
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 01EE             putchar('z');
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 01EF             delay_ms(5);
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 01F0             PORTD.6 = 1;
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 01F1             }
; 0000 01F2             if (!PORTD.4 && fire2 == 1 && inside_counter2 == 0){
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 01F3             lcd_clear();
;PCODE: $00000349 VOL: 0
; 0000 01F4             lcd_puts("Evacuated!");
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 01F5             PORTD.7 = 0;
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0000 01F6             PORTD.4 = 1;
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 01F7             PORTD.6 = 0;
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0000 01F8             delay_ms(5);
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0000 01F9             putchar('z');
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 01FA             delay_ms(5);
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 01FB             PORTD.6 = 1;
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 01FC             }
; 0000 01FD 
; 0000 01FE         switch (rx_buffer[8]){
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 01FF                 case '3': {
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0000 0200                     lcd_clear();
;PCODE: $00000363 VOL: 0
; 0000 0201                     if (entrance_status1[0]){
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 0202                          lcd_puts("Sara exited.");
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 0203                          entrance_status1[0] = 0;
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 0204                     }else if(!fire1){
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
; 0000 0205                          lcd_puts("Sara entered.");
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 0206                          entrance_status1[0] = 1;
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 0207                          }
; 0000 0208                     clear_buffer();
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 0209                     delay_ms(1000);
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 020A                     lcd_show();
;PCODE: $0000037A VOL: 0
; 0000 020B                     break;
;PCODE: $0000037B VOL: 0
; 0000 020C                     }
; 0000 020D                 case '7':  {
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0000 020E                     lcd_clear();
;PCODE: $0000037F VOL: 0
; 0000 020F                     if (entrance_status1[1]){
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 0210                          lcd_puts("Atieh exited.");
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 0211                          entrance_status1[1] = 0;
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0000 0212                     }else if(!fire1) {
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0000 0213                          lcd_puts("Atieh entered.");
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 0214                          entrance_status1[1] = 1;
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 0215                          }
; 0000 0216                     clear_buffer();
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0000 0217                     delay_ms(1000);
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0000 0218                     lcd_show();
;PCODE: $0000039B VOL: 0
; 0000 0219                     break;
;PCODE: $0000039C VOL: 0
; 0000 021A                     }
; 0000 021B                 case '1': {
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 021C                     lcd_clear();
;PCODE: $000003A0 VOL: 0
; 0000 021D                     if (entrance_status2[0]){
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0000 021E                          lcd_puts("Zahra exited.");
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0000 021F                          entrance_status2[0] = 0;
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 0220                     }else if(!fire2) {
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
; 0000 0221                          lcd_puts("Zahra entered.");
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 0222                          entrance_status2[0] = 1;
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
; 0000 0223                          }
; 0000 0224                     clear_buffer();
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0000 0225                     delay_ms(1000);
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0000 0226                     lcd_show();
;PCODE: $000003B7 VOL: 0
; 0000 0227                     break;
;PCODE: $000003B8 VOL: 0
; 0000 0228                     }
; 0000 0229                 case 'F': {
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0000 022A                     lcd_clear();
;PCODE: $000003BC VOL: 0
; 0000 022B                     if (entrance_status2[1]){
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
; 0000 022C                          lcd_puts("Jack exited.");
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 022D                          entrance_status2[1] = 0;
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
; 0000 022E                     }else if(!fire2) {
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0000 022F                          lcd_puts("Jack entered.");
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
; 0000 0230                          entrance_status2[1] = 1;
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
; 0000 0231                          }
; 0000 0232                     clear_buffer();
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0000 0233                     delay_ms(1000);
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0000 0234                     lcd_show();
;PCODE: $000003D8 VOL: 0
; 0000 0235                     break;
;PCODE: $000003D9 VOL: 0
; 0000 0236                     }
; 0000 0237                 case 'A': {
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
; 0000 0238                     lcd_clear();
;PCODE: $000003DD VOL: 0
; 0000 0239                     if (entrance_status2[2]){
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
; 0000 023A                          lcd_puts("Shakiba exited.");
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
; 0000 023B                          entrance_status2[2] = 0;
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0000 023C                     }else if(!fire2) {
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0000 023D                          lcd_puts("Shakiba entered.");
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 023E                          entrance_status2[2] = 1;
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 0000 023F                          }
; 0000 0240                     clear_buffer();
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 0000 0241                     delay_ms(1000);
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
; 0000 0242                     lcd_show();
;PCODE: $000003F9 VOL: 0
; 0000 0243                     break;
;PCODE: $000003FA VOL: 0
; 0000 0244                     }
; 0000 0245                 }
;PCODE: $000003FB VOL: 0
; 0000 0246 
; 0000 0247 
; 0000 0248 
; 0000 0249 
; 0000 024A 
; 0000 024B         }
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 024C 
; 0000 024D 
; 0000 024E 
; 0000 024F 
; 0000 0250 }
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0

	.DSEG
_0x75:
	.BYTE 0xC2
;
;
;
;
